/*
1. try-блок Ч так называемый блок повторных попыток. ¬ нем надо располагать код, который может привести к ошибке и аварийному закрытию программы;

2. throw генерирует исключение. “о что остановит работу try-блока и приведет к выполнению кода catch-блока. 
“ип исключени€ должен соответствовать, типу принимаемого аргумента catch-блока;

3. catch-блок Ч улавливающий блок, поймает то, что определил  throw и выполнит свой код. Ётот блок должен располагатьс€ непосредственно под try-блоком. 
Ќикакой код не должен их раздел€ть. если в try-блоке исключение не генерировалось, catch-блок не сработает. ѕрограмма его обойдет.
*/
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");

    int num1;
    int num2;
    int var = 2;

    while (var--) //пока var - истина (не равно 0)
    {
        cout << "¬ведите значение num1: ";
        cin >> num1;
        cout << "¬ведите значение num2: ";
        cin >> num2;

        cout << "num1 + num2 = " << num1 + num2 << endl;
        cout << "num1 / num2 = ";

        try //код, который может привести к ошибке, располагаетс€ тут
        {
            //  ≈сли условие выполн€етс€ try-блок сразу прекращает выполнение дальнейших команд, а строка попадает в catch в качестве аргумента.
            if (num2 == 0)  // throw перехватывает управление программой
            {
                throw "ќшибка - на 0 делить нельз€!!!!"; //генерировать целое число 123
            }
            cout << num1 / num2 << endl;
        }
        catch (const char * str) //сюда передастс€ число 123
        {
            cout << str << endl;
        }

        cout << "num1 - num2 = " << num1 - num2 << endl;
        cout << "=================================" << endl << endl;
    }

    cout << "ѕрограмма завершила работу!" << endl << endl;;

    return 0;
}